# Allow upload File MIME-type
enum AllowUploadFileType {
  GIF
  JPG
  MP3
  MP4
  OGG
  PNG
  WAV
}

# HTTP endpoint authorization entity.
type AuthorizationTokenEntity {
  # Token expired date
  expiredAt: DateTime!

  # Token on refresh expired date
  refreshExpiredAt: DateTime!

  # User API endpoit authorization token.
  token: String!

  # Logged Viewer entity
  user: UserEntity!

  # User ID
  userId: ID!
}

# A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
scalar DateTime

# Date time filter
input DateTimeFilter {
  # Date equals
  equals: DateTime

  # Date gt
  gt: DateTime

  # Date gte
  gte: DateTime

  # Date in
  in: [DateTime!]

  # Date lt
  lt: DateTime

  # Date lte
  lte: DateTime

  # Date not
  not: DateTimeFilter

  # Date not in
  notIn: [DateTime!]
}

# Audio media.
type MomentAudioMedia implements MomentMediaCommon {
  # Audio path
  audio: String!

  # Audio cover
  cover: String

  # Media type.
  type: MomentMediaType!
}

# Moment entity
type MomentEntity {
  # Moment content
  content: String!

  # Moment created at
  createdAt: DateTime!

  # Moment deleted at
  deletedAt: DateTime!

  # The moment ID
  id: ID!

  # Moment media
  media: MomentMedia

  # The moment owner
  owner: UserEntity!

  # Moment owner ID
  ownerId: ID!

  # Moment title
  title: String
}

# Image media.
type MomentImageMedia implements MomentMediaCommon {
  # Images
  images: [String!]!

  # Media type.
  type: MomentMediaType!
}

# Moment media.
union MomentMedia = MomentAudioMedia | MomentImageMedia | MomentVideoMedia

# Media common
interface MomentMediaCommon {
  # Media type.
  type: MomentMediaType!
}

# Media type.
enum MomentMediaType {
  AUDIO
  IMAGE
  VIDEO
}

# Moment order by input
input MomentOrderByInput {
  # Field sort order
  content: sortOrder

  # Field sort order
  createdAt: sortOrder

  # Field sort order
  deletedAt: sortOrder

  # Field sort order
  id: sortOrder

  # Field sort order
  media: sortOrder

  # Field sort order
  owner: UserOrderByInput

  # Field sort order
  ownerId: sortOrder

  # Field sort order
  title: sortOrder
}

# Moment scalar field enum.
enum MomentScalarFieldEnum {
  content
  createdAt
  deletedAt
  id
  media
  ownerId
  title
}

# Video media
type MomentVideoMedia implements MomentMediaCommon {
  # Video cover
  cover: String!

  # Media type.
  type: MomentMediaType!

  # Video path
  video: String!
}

input MomentWhereInput {
  # AND where
  AND: [MomentWhereInput!]

  # NOT where
  NOT: [MomentWhereInput!]

  # OR where
  OR: [MomentWhereInput!]

  # content filter
  content: StringFilter

  # created at date time filter
  createdAt: DateTimeFilter

  # ID string filter
  id: StringFilter

  # owner filter
  owner: UserRelationFilter

  # owner ID string filter
  ownerId: StringFilter

  # title filter
  title: StringFilter
}

# Moment Where Unique input
input MomentWhereUniqueInput {
  # The moment ID
  id: ID
}

type Mutation {
  # Create AuthorizationTokenEntity
  createAuthorizationToken(
    # Create AuthorizationToken security value
    security: String!

    # Create AuthorizationToken security type
    type: UserSecurityCompareType!

    # User find where unique input
    user: UserWhereUniqueInput!
  ): AuthorizationTokenEntity!

  # Create Tencent Cloud COS read credential
  createCosTemporaryReadCredential: TencentCloudCosCredentials!

  # Create Tencent Cloud COS write credential
  createCosTemporaryWriteCredential(
    # create resource type.
    type: AllowUploadFileType!
  ): TencentCloudCosCredentials!

  # Create a security SMS code for phone number
  createSecurity(
    # Need send code phone number
    phone: String!
  ): DateTime!

  # Create the viewer security SMS code
  createViewerSecurity: DateTime!

  # Forgot password, reset phone bound user password.
  forgotPassword(
    # User new password
    password: String!

    # User bound Phone full number.
    phone: String

    # Create AuthorizationToken security value
    security: String!
  ): UserEntity!

  # Refresh HTTP endpoint authorization token entity.
  refreshAuthorizationToken: AuthorizationTokenEntity!

  # Update viewer password
  updateViewerPassword(
    # User new password
    password: String!

    # Create AuthorizationToken security value
    security: String!

    # Create AuthorizationToken security type
    type: UserSecurityCompareType!
  ): UserEntity!

  # Update viewer phone field
  updateViewerPhone(
    # new phone security code
    newPhoneSecurity: String!

    # User bound Phone full number.
    phone: String

    # Create AuthorizationToken security value
    security: String!

    # Create AuthorizationToken security type
    type: UserSecurityCompareType!
  ): UserEntity!

  # Update viewer profile
  updateViewerProfile(
    # Viewer profile update data.
    data: UserProfileUpdateInput!
  ): UserProfileEntity!

  # Update viewer username field
  updateViewerUsername(
    # Create AuthorizationToken security value
    security: String!

    # Create AuthorizationToken security type
    type: UserSecurityCompareType!

    # User username
    username: String
  ): UserEntity!
}

type Query {
  # Query HTTP endpoint AuthorizationTokenEntity
  authorizationToken: AuthorizationTokenEntity!

  # Find the first Moment that matches the filter.
  momentFindFirst(
    # Sets the position for listing Moments
    cursor: MomentWhereUniqueInput

    # Sets the query distinct
    distinct: [MomentScalarFieldEnum!]

    # Determine the order of Moments to fetch.
    orderBy: [MomentOrderByInput!]

    # Filter, which Moments to fetch.
    where: MomentWhereInput
  ): MomentEntity

  # Find zero or more Moments that matches the filter
  momentFindMany(
    # Sets the position for listing Moments
    cursor: MomentWhereUniqueInput

    # Sets the query distinct
    distinct: [MomentScalarFieldEnum!]

    # Determine the order of Moments to fetch.
    orderBy: [MomentOrderByInput!]

    # Skip the first `n` Moments.
    skip: Int = 0

    # Take `Â±n` Moments from the position of the cursor.
    take: Int = 15

    # Filter, which Moments to fetch.
    where: MomentWhereInput
  ): [MomentEntity]!

  # Find zero or one Moment that matches the filter
  momentFindUnique(
    # Find unique where
    where: MomentWhereUniqueInput!
  ): MomentEntity!

  # Find zero or one User that matches the filter.
  userFindUnique(
    # User where unique input
    where: UserWhereUniqueInput!
  ): UserEntity!

  # Query the HTTP endpoint Authorization user.
  viewer: UserEntity!
}

# query mode
enum QueryMode {
  default
  insensitive
}

# String filter
input StringFilter {
  # String contains
  contains: String

  # String end with
  endsWith: String

  # String equals
  equals: String

  # String gt
  gt: String

  # String gte
  gte: String

  # String in
  in: [String!]

  # String lt
  lt: String

  # String lte
  lte: String

  # query mode
  mode: QueryMode

  # not
  not: StringFilter

  # String not in
  notIn: [String!]

  # String starts with
  startsWith: String
}

# Tencent CLoud COS credential
type TencentCloudCosCredentials {
  # Tencent Cloud STS authorization token
  authorization: TencentCloudStsFederationToken!

  # Tencent Cloud COS bucket
  bucket: String!

  # Tencent Cloud COS object key
  key: String!

  # Tencent Cloud COS bucket region
  region: String!
}

# Tencent Cloud STS credentials.
type TencentCloudStsCredentials {
  # Tencent Cloud credentials secrect id
  TmpSecretId: String!

  # Tencent Cloud credentials secrect key
  TmpSecretKey: String!

  # Tencent Cloud credentials token
  Token: String!
}

# Tencent Clous STS federation token
type TencentCloudStsFederationToken {
  # Tencent Cloud credentials
  Credentials: TencentCloudStsCredentials

  # Tencent Cloud credentials expired ISO8601 date.
  Expiration: String

  # Tencent Cloud credentials expired Unix time.
  ExpiredTime: Int
}

# User entity
type UserEntity {
  # User registered date at.
  createdAt: DateTime!

  # User ID
  id: ID!

  # Has the user set a password.
  isSetPassword: Boolean!

  # User bound Phone full number.
  phone: String

  # The user profile
  profile: UserProfileEntity!

  # User username
  username: String
}

# User order by input
input UserOrderByInput {
  # Field sort order
  createdAt: sortOrder

  # `id` field sort order
  id: sortOrder

  # Field sort order
  password: sortOrder

  # Field sort order
  phone: sortOrder

  # Field sort order
  profile: UserProfileOrderByInput

  # Field sort order
  username: sortOrder
}

# User profile entity
type UserProfileEntity {
  # User avatar storage path.
  avatar: String

  # User bio.
  bio: String

  # User location string.
  location: String

  # User name.
  name: String

  # User profile updated at.
  updatedAt: DateTime

  # Profile owner ID
  userId: ID!
}

# User profile order by input
input UserProfileOrderByInput {
  # `avatar` field sort order
  avatar: sortOrder

  # `bio` field sort order
  bio: sortOrder

  # `location` field sort order
  location: sortOrder

  # `name` field sort order
  name: sortOrder

  # `updatedAt` field sort order
  updatedAt: sortOrder

  # `userId` field sort order
  userId: sortOrder
}

# User profile where filter
input UserProfileRelationFilter {
  # is where input
  is: UserProfileWhereInput

  # is not where input
  isNot: UserProfileWhereInput
}

# User profile update input
input UserProfileUpdateInput {
  # User avatar storage path.
  avatar: String

  # User bio.
  bio: String

  # User location string.
  location: String

  # User name.
  name: String
}

# User profile where input
input UserProfileWhereInput {
  # AND where
  AND: [UserProfileWhereInput!]

  # NOT where
  NOT: [UserProfileWhereInput!]

  # OR where
  OR: [UserProfileWhereInput!]

  # User avatar filter
  avatar: StringFilter

  # User bio filter
  bio: StringFilter

  # User location filter
  location: StringFilter

  # User name filter
  name: StringFilter

  # User relation filter
  user: UserRelationFilter

  # User ID filter
  userId: StringFilter
}

# User Relation filter
input UserRelationFilter {
  # User relation filter is
  is: UserWhereInput

  # User relation filter is not
  isNot: UserWhereInput
}

# User security compare type
enum UserSecurityCompareType {
  PASSWORD
  PHONE_SMS_CODE
}

# User where input
input UserWhereInput {
  # AND where
  AND: [UserWhereInput!]

  # NOT where
  NOT: [UserWhereInput!]

  # OR where
  OR: [UserWhereInput!]

  # created at date time filter
  createdAt: DateTimeFilter

  # ID filter
  id: StringFilter

  # user moment list relation filter
  moments: UserProfileRelationFilter

  # user phone number filter
  phone: StringFilter

  # user profile relation filter
  profile: UserProfileRelationFilter

  # username filter
  username: StringFilter
}

# User where inique input
input UserWhereUniqueInput {
  # User ID
  id: ID

  # User bound Phone full number.
  phone: String

  # User username
  username: String
}

# Sort order
enum sortOrder {
  asc
  desc
}
